// Generated by gencpp from file phasespace/Marker.msg
// DO NOT EDIT!


#ifndef PHASESPACE_MESSAGE_MARKER_H
#define PHASESPACE_MESSAGE_MARKER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace phasespace
{
template <class ContainerAllocator>
struct Marker_
{
  typedef Marker_<ContainerAllocator> Type;

  Marker_()
    : id(0)
    , flags(0)
    , time(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , cond(0.0)  {
    }
  Marker_(const ContainerAllocator& _alloc)
    : id(0)
    , flags(0)
    , time(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , cond(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef uint32_t _flags_type;
  _flags_type flags;

   typedef uint64_t _time_type;
  _time_type time;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _cond_type;
  _cond_type cond;





  typedef boost::shared_ptr< ::phasespace::Marker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phasespace::Marker_<ContainerAllocator> const> ConstPtr;

}; // struct Marker_

typedef ::phasespace::Marker_<std::allocator<void> > Marker;

typedef boost::shared_ptr< ::phasespace::Marker > MarkerPtr;
typedef boost::shared_ptr< ::phasespace::Marker const> MarkerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phasespace::Marker_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phasespace::Marker_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::phasespace::Marker_<ContainerAllocator1> & lhs, const ::phasespace::Marker_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.flags == rhs.flags &&
    lhs.time == rhs.time &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.cond == rhs.cond;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::phasespace::Marker_<ContainerAllocator1> & lhs, const ::phasespace::Marker_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace phasespace

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::phasespace::Marker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phasespace::Marker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phasespace::Marker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phasespace::Marker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phasespace::Marker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phasespace::Marker_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phasespace::Marker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "263d5635c15e661dd0615ba6f237c9a9";
  }

  static const char* value(const ::phasespace::Marker_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x263d5635c15e661dULL;
  static const uint64_t static_value2 = 0xd0615ba6f237c9a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::phasespace::Marker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phasespace/Marker";
  }

  static const char* value(const ::phasespace::Marker_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phasespace::Marker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n"
"uint32 flags\n"
"uint64 time\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 cond\n"
;
  }

  static const char* value(const ::phasespace::Marker_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phasespace::Marker_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.flags);
      stream.next(m.time);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.cond);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Marker_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phasespace::Marker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phasespace::Marker_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flags);
    s << indent << "time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "cond: ";
    Printer<float>::stream(s, indent + "  ", v.cond);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHASESPACE_MESSAGE_MARKER_H
